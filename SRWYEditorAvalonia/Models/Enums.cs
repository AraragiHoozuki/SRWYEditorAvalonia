using Avalonia.Controls;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SRWYEditor.Models
{
    public enum DataBaseType
    {
        Robot,
        Pilot,
        StatusAttach
    }
    public enum RobotSize
    {

        SS,
        S,
        M,
        L,
        L2,
        L3,
        Infinity
    }
    public enum LandAdaptationRank
    {
        S,
        A,
        B,
        C,
        D
    }
    public enum TransferType
    {
        None,
        MSUC,
        MSAC,
        ARBTR,
        HVMTL,
        Lancelot,
        VALKY,
        VANG
    }
    public enum WeaponHandlingType
    {
        None,
        Shooting,
        Melee
    }
    public enum MAPWFiringType
    {
        None,
        Straight,
        Landing,
        Center
    }
    public enum WeaponPowerType
    {
        None,
        Beam,
        Entity,
        NonNone,
        NonBeam,
        NonEntity
    }
    public enum WeaponDebuffType
    {
        None,
        ENDown,
        ArmorDown,
        MobilityDown,
        SightDown,
        MoraleDown,
        CutPilotParameterInHalf,
        SPDown,
        ShutDown
    }
    public enum MovingType
    {
        Normal,
        Glide,
        Fly,
        Warp
    }
    public enum AwakeType
    {
        Forced,
        Command
    }
    public enum SpecialDefenseType
    {
        None,
        Barrier,
        Armor,
        Offshoot
    }
    public enum PowerPartsRarity
    {
        N,
        R,
        SR,
        SSR
    }
    public enum Gender
    {
        None,
        Male,
        Female
    }
    public enum Species
    {
        Ather,
        Human
    }
    public enum OtherElementForPilot
    {
        Kaiju,
        KaijuTamer
    }
    public enum SATiming
    {
        None,
        ExchangeParameter,
        SetupCalcParameter,
        SetupCalcWeaponFirstRange,
        SetupCalcWeaponParameter,
        MakeLastParameter,
        MakePowerPartsSlot,
        ActionEnd,
        Sortie,
        PhaseStart,
        PhaseEnd,
        BattleCalculate,
        BattleResult,
        BattleResultAfter,
        Landing,
        Takeoff,
        StageClear,
        ChangeMorale,
        AwakeBefore,
        AwakeAfter,
        ShotDown,
        CalcStoreCost,
        PreUnitCommand,
        PostUnitCommand,
        UnitTrinityEnd,
        ExtraSortieAction,
        ExchangeParameterByRobot,
        PhaseStartSpiritCommand
    }
    public enum SARelationship
    {
        None,
        Myself,
        Friend,
        Enemy
    }
    public class SAJudgeMethods
    {
        public enum Key
        {
            None,
            GiverOnSortie,
            GiverOnSortieAssistLink,
            GiverIsNotMoveThisAction,
            GiverIsShutDown,
            GiverIsNotShutDown,
            GiverMountedSpiritCommand,
            GiverNotMountedSpiritCommand,
            GiverEnabledActevatedKey,
            GiverDisabledActevatedKey,
            GiverEnabledOnceKey,
            GiverDisabledOnceKey,
            GiverEnabledActevatedKeyWithTarget,
            GiverDisabledActevatedKeyWithTarget,
            GiverEnabledOnceKeyWithTarget,
            GiverDisabledOnceKeyWithTarget,
            GiverPilotOrMoreMoraleNow,
            GiverPilotOrLessMoraleNow,
            GiverAllPilotOrMoreMoraleNow,
            GiverRobotOrMoreEnterPilot,
            GiverRobotMoreHPNowValue,
            GiverRobotOrLessHPNowValue,
            GiverRobotMoreHPNowRate,
            GiverRobotOrLessHPNowRate,
            GiverPilotOrMorePilotSkillLevel,
            GiverPawnOrMorePawnKeyCountStrage,
            GiverInRangeRobot,
            GiverInRangePilot,
            GiverAroundFriend,
            GiverAroundEnemy,
            GiverAroundMale,
            GiverAroundFemale,
            GiverOrMoreSortieFriend,
            GiverOrMoreSortieEnemy,
            GiverOrMoreFriendThanEnemy,
            GiverOrLessFriendThanEnemy,
            GiverIsThisRobot,
            GiverIsNotThisRobot,
            GiverIsThisPilot,
            GiverIsNotThisPilot,
            GiverPilotRankOrMoreSuperAce,
            GiverPilotHaveAceBonus,
            GiverRobotHaveCustomBonus,
            GiverRobotIsCarried,
            GiverRobotIsNotShip,
            GiverIsNotAction,
            GiverBattleAttacker,
            GiverBattleDifencer,
            GiverBattleAttackerEnemy,
            GiverBattleParticipation,
            GiverBattleAttackSide,
            GiverBattleDefendSide,
            GiverBattleMainAttack,
            GiverBattleSecondAttacker,
            GiverBattleSupportAttacker,
            GiverBattleSupportDefencer,
            GiverBattleNotSupportDefencer,
            GiverBattleMapWeaponAttakedEnemy,
            GiverBattleMapWeaponAttakedTeam,
            GiverBattleDifencerEnemyAttakSide,
            GiverBattleAttacerDefencedEnemySide,
            GiverBattleResultMainAttacked,
            GiverBattleResultSecondAttacked,
            GiverBattleResultSupportAttacked,
            GiverBattleResultSupportDefensed,
            GiverBattleResultShotDown,
            NowBattleResultShotDown,
            GiverBattleResultAttacked,
            ReceiverBattleResultAttacked,
            ReceiverBattleResultAttackedReceiver,
            GiverBattleResultHit,
            ReceiverBattleResultHit,
            GiverBattleResultDamaged,
            ReceiverBattleResultDamaged,
            GiverBattleResultEvaded,
            GiverBattleResultSpecialEvaded,
            GiverBattleResultSpecialBarria,
            GiverBattleResultSupportDefended,
            GiverBattleResultDamageOver,
            GiverBattleResultMapWeapons,
            BattleSelectAvoid,
            BattleSelectGuard,
            BattleAttackSideIsMale,
            BattleAttackSideIsFemale,
            BattleDefendSideIsMale,
            BattleDefendSideIsFemale,
            BattleComparedPilotParameterSkillOrMore,
            BattleComparedPilotParameterSkillOrLess,
            BattleComparedPilotLevelOrMore,
            BattleComparedPilotLevelOrLess,
            BattleAttackSideIsOtherElementForPilot,
            BattleDefendSideIsOtherElementForPilot,
            BattleOrMoreDistance,
            BattleOrLessDistance,
            BattleWeaponSlot,
            BattleWeaponMAPW,
            BattleWeaponMelee,
            BattleWeaponShoot,
            BattleWeaponEntity,
            BattleWeaponBeam,
            ReceiverRobotReferenceId,
            ReceiverPilotReferenceId,
            ReceuverSubPilotReferenceId,
            ReceiverPilotMale,
            ReceiverPilotFemale,
            ReceiverPilotIsNowMainPilot,
            ReceiverPilotIsNowSubPilot,
            ReceiverPilotIsAceBonus,
            ReceiverRobotIsCustomBonus,
            ReceiverBattleAttackSide,
            ReceiverBattleDefendSide,
            ReceiverBattleMountedSpiritCommand,
            ReceiverBattleNotMountedSpiritCommand,
            ComparedPawnOrMoreDistance,
            ComparedPawnOrLessDistance,
            ComparedPawnInCommanderRange,
            ComparedFriendAlly,
            ComparedEnemyAlly,
            ExistSortieRobotReferenceId,
            ExistSortiePilotReferenceId,
            EqualConditionValue,
            SortieOtherElementForPilot,
            AroundOrMoreCount,
            EnabledInGameFlag,
            DisabledInGameFlag,
            EnableAllyEffect,
            DisabledAllyEffect,
            EnableAssist,
            UsedUnitCommand1,
            UsedUnitCommand2,
            UsedSpiritCommand,
            UsedSAInterface,
            UsedAbilitySkil,
            UsedPowerParts,
            UsedPowerPartsPawn,
            EnemyMoreShotDown,
            EnemyEveryShotDown,
            UsedSupplyServicingUnit,
            UsedSupplyServicingUnUnit,
            UsedSupplyServicTakeUnUnit,
            CurrentMissionIsArea,
            DedicatedSupportTEOZAO,
            GiverBattleHPDifferenceD2A
        }
    }
    public enum SpiritFlag
    {
        NEKKETSU,
        TAMASHII,
        HIRAMEKI,
        FUKUTU,
        TEPPEKI,
        SHUCHU,
        HICCHU,
        KANNOU,
        TYOKKAN,
        KASOKU,
        KAKUSEI,
        KONJOU,
        KYOUKAN,
        SHINRAI,
        YUJOU,
        HOKYU,
        KIAI,
        KIHAKU,
        GEKIREI,
        TEKAGEN,
        SOGEKI,
        TOTSUGEKI,
        DATURYOKU,
        KAKURAN,
        LOVE,
        YUKI,
        KOUUN,
        SHUKUFUKU,
        DORYOKU,
        OUEN,
        BUNSEKI,
        KIZUNA,
        KITAI,
        YOSOKU,
        KIBOU,
        TOUSHI,
        CHOKUGEKI,
        RENGEKI,
        KOUSYU,
        JUGEKI,
        IATSU
    }

    public class ButtonHandler
    {
        public enum ButtonType
        {
            None = -1,
            Persuade,
            Move,
            Attack,
            Split,
            AssistLink,
            LandformAction,
            Deformation,
            Collect,
            Departure,
            Special,
            Special2,
            Fix,
            Supply,
            Parts,
            Rest,
            PhaseEnd,
            Mission,
            TacticalSituation,
            UnitList,
            Auto,
            Search,
            System,
            Save,
            NUM_OF_BUTTON_TYPE
        }

        public enum DeformationType
        {
            None = -1,
            Trasformation,
            Retrofit,
            ArmorPurge,
            United,
            Separated
        }

        public enum CollectType
        {
            None = -1,
            Carry,
            ShipCarry,
            EmergencyCarry
        }

        public enum SpecialType
        {
            None = -1,
            TacticalCommand,
            RaiseMorale,
            BoostMorale,
            Awake,
            WideAreaTacticsAlert,
            AssaultTactics,
            Dogma
        }

        protected struct btnTextData
        {
            public string CommandText;
            public string CommandTextKey;
            public string GuideText;
        }
    }
    public enum SAGroup
    {
        PilotSkill,
        RobotSkill,
        PowerParts,
        AceBonus,
        CustomBonus,
        FullCustomBonus,
        AssistPassive,
        AllyEffect,
        SpiritCommand,
        AssistActive,
        None
    }
    public enum SAEffectMethodsKey
    {
        None,
        RobotHPMax,
        RobotENMax,
        RobotArmor,
        RobotMobility,
        RobotSight,
        RobotMovePower,
        RobotMovePowerInTurn,
        RobotMovePowerInMove,
        RobotMovePowerNoDuplicates,
        RobotHPNow,
        RobotHPNowRatePercentage,
        RobotHPImmediatelyNowRatePercentage,
        RobotENNow,
        RobotENNowRatePercentage,
        RobotENNowWithMoveCount,
        RobotENNowImmediatelyValue,
        RobotENNowArroundValue,
        RobotBulletAllRecover,
        RobotRemoveSkill,
        RobotAppendSkill,
        RobotExchangeSkill,
        RobotLandAdaptationToAdd,
        RobotLandAdaptationToBetter,
        RobotLandAdaptationToForceBetter,
        RobotMovingStatusIgnoreTerrain,
        RobotAppendSupplyUnit,
        RobotAppendRepairUnit,
        RobotBarrierStrength,
        RobotBarrierConsumeEN,
        RobotBarrierConsumeENRate,
        RobotBarrierConsumeENRateUnConsume,
        RobotPowerPartsSlot,
        RobotIgnoreSize,
        RobotIgnoreMoveConsumeEn,
        RobotClearWeaponDebuff,
        PilotMoraleNow,
        PilotMoraleNowImmediatelyValue,
        PilotMoraleMax,
        PilotMoraleSetNow,
        PilotMoraleSortie,
        PilotParameterMelee,
        PilotParameterRange,
        PilotParameterDefend,
        PilotParameterHit,
        PilotParameterEvade,
        PilotParameterSkill,
        PilotParameterMeleeChangeFromMorale,
        PilotParameterRangeChangeFromMorale,
        PilotParameterDefendChangeFromMorale,
        PilotParameterHitChangeFromMorale,
        PilotParameterEvadeChangeFromMorale,
        PilotParameterSkillChangeFromMorale,
        PilotParameterSPMax,
        PilotSPNowValue,
        PilotSPNowRatePercentage,
        PilotSPNowValueWithMoveCount,
        PilotSPSortieValue,
        PilotSPSortieRatePercentage,
        PilotSTGSPSortieRatePercentage,
        PilotSPNowImmediatelyValue,
        PilotSPNowForJudgeAround,
        PilotAceScore,
        PilotSupportAttack,
        PilotSupportDefense,
        PilotRemoveSkill,
        PilotAppendSkill,
        PilotExchangeSkill,
        PilotChangeSkillVersion,
        PilotAddSkillLevel,
        PilotExchangeSpiritCommand,
        PilotChangeSpiritCommandCost,
        PilotChangeSpiritCommandCostByValue,
        PilotChangeSpiritCommandCostByRate,
        PilotMountSpiritCommand,
        PilotNowArroundSpiritCommand,
        PilotMoraleForJudgeAround,
        MainPilotMoraleForJudgeAround,
        PilotMoraleSpecified,
        PilotSPSpecified,
        WeaponPower,
        WeaponFixPower,
        WeaponPowerByTurnCount,
        WeaponPowerByRangeUpper,
        WeaponPowerByRangeLower,
        WeaponPowerByPilotSkillLevel,
        WeaponSight,
        WeaponCritical,
        WeaponBulletMax,
        WeaponBulletMaxRate,
        WeaponENCost,
        WeaponENCostRate,
        WeaponENCostRateUnDuplicates,
        WeaponRangeMaxIncludingRangeOne,
        WeaponRangeMaxOtherThanRangeOne,
        WeaponRangeMaxWithoutMoveAfter,
        WeaponMoraleCondition,
        WeaponLandAdaptationToAdd,
        WeaponLandAdaptationToSet,
        WeaponDebuffs,
        WeaponUseMoveAfter,
        WeaponCounter,
        WeaponBarrierPenetration,
        WeaponIgnoreSize,
        WeaponNotConsumeResource,
        BattleCalcHit,
        BattleCalcHitDivide,
        BattleCalcHitRate,
        BattleLastHit,
        BattleLastHitRate,
        BattleLastHitLimit,
        BattleRequiredHitRate,
        BattleRequiredAvoidRate,
        BattleAbsoluteHit,
        BattleRisingAbsolutHit,
        BattleAbsoluteAvoid,
        BattleSpecialDefense,
        BattleIgnoreWeaponDebuff,
        BattleIgnoreWeaponDebuffStrong,
        BattleIgnoreIgnoreWeaponDebuff,
        BattleAddWeaponDebuff,
        BattleDamageRate,
        BattleDamageRateForSpecialHit,
        BattleDamageRateForAvoided,
        BattleDamageRateForDefenceCommand,
        BattleDamageRateForDefenceSupport,
        BattleDamageRateForCritical,
        BattleCritical,
        BattleAlmostCritical,
        BattleNotAlmostCritical,
        BattleAbsoluteCritical,
        BattleIgnoreShotDown,
        BattleIgnoreDamage,
        BattleIgnoreSupportDefense,
        BattleSpecialArmorPenetration,
        BattleIgnoreSpecialAvoid,
        BattleSpecialAvoidActiveRate,
        BattleCommanderValue,
        BattleCommanderSetValue,
        BattleSecondAttack,
        BattleFieldEffectRate,
        BattleIgnoreFieldEffect,
        BattleIgnoreContinuousTarget,
        BattleIgnorePlacement,
        BattleIgnoreBarrierPenetration,
        BattleAddMoraleChangeByAttacker,
        BattleAddMoraleChangeByAttackerRregardlessOfHit,
        OthersCreditValue,
        OthersCreditRate,
        OthersUniqueCreditValue,
        OthersUniqueCreditRate,
        OthersEXPRate,
        OthersUniqueEXPRate,
        OthersMXPValue,
        OthersMXPRate,
        OthersUniqueMXPValue,
        OthersUniqueMXPRate,
        OthersPowerParts,
        OthersSkillProgram,
        OthersActionCount,
        OthersSetThreshold,
        OthersActivateAbility,
        OthersRemoveActivateAbility,
        OthersOnceAbility,
        OthersTurnEffect,
        OthersAssistGauge,
        OthersAddKeyCount,
        OthersMakeHarmonicLevelKeyCount,
        OthersAddHarmonicLevelCount,
        OthersAppendInGameFlag,
        OthersRemoveInGameFlag,
        OthersRobotUpgradeCostRate,
        OthersWeaponUpgradeCostRate,
        OthersPowerPartsCostRate,
        OthersSkillProgramCostRate,
        OthersAddSupplyCommandRange,
        OthersAddRepairCommandRange,
        OthersSupplyCommandUseMoveAfter,
        OthersRepairCommandRepairRate
    }
    public enum RobotSkillIcon
    {
        None,
        Specific,
        Shield,
        Barrier,
        Separate,
        Transform,
        Restoration,
        RepairUnit,
        SupplyUnit,
        Jamming,
        Evade
    }
    public enum SkillProgramRarity
    {
        N,
        R,
        SR,
        SSR
    }
}
